linux_task:
  container:
    image: gcc:latest
  env:
    CODECOV_TOKEN: f0a2eca9-3983-4103-a6f4-02b1caf4cbb5
  setup_script:
    - apt-get update
    - apt-get install -y --no-install-recommends valgrind ccache clang cmake
  build_script: cd dev && make CC=gcc all
  test_script: cd dev && make CC=gcc test
  test_optimized_script: cd dev && make CC=gcc O=3 test
  test_nodebug_script: cd dev && make CC=gcc O=2 RYDB_DEBUG= test
  test_valgrind_script: cd dev && make CC=gcc O=1 valgrind
  test_clang_sanitize_script:
    - cd dev
    - make O=2 SANITIZE_ADDRESS_USE="" sanitize
  #coveralls_script:
  #  - apt-get update
  #  - apt-get install -y --no-install-recommends python python-dev
  #  - wget https://bootstrap.pypa.io/get-pip.py
  #  - python get-pip.py
  #  - pip install --user cpp-coveralls
  #  - pip install --user pyYAML
  #  - make CCACHE="" CC=gcc COVERAGE_VIEW="" coverage-gcc-create
  #  - /root/.local/bin/coveralls --exclude tests --gcov-options '\-lp'
  test_cmake_script: cd dev && make cmake-test
  codecov_script:
    - cd dev
    - make CC=gcc coverage-gcc-create
    - bash <(curl -s https://codecov.io/bash)

osx_task:
  osx_instance:
    image: mojave-xcode-10.1
  test_script:
    - cd dev
    - make CCACHE="" all
    - make CCACHE="" -C ../tests static
    - make CCACHE="" -C ../tests run
  test_optimized_script:
    - cd dev
    - make CCACHE="" O=3 all
    - make CCACHE="" -C ../tests static
    - make CCACHE="" -C ../tests run
  test_cmake_script:
    - cmake ./
    - cd tests
    - make CCACHE="" static
    - make CCACHE="" run

freebsd_task:
  freebsd_instance:
    image: freebsd-12-0-release-amd64
  setup_script: pkg install -y gmake cmake
  test_script: cd dev && gmake CCACHE="" test
  test_optimized_script: cd  dev && gmake CCACHE="" O=3 test
  test_cmake_script: cd dev && gmake CCACHE="" cmake-test
 
